package com.github.alexmelyon.rubicssolver

import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test


class RubicsSolverTest {

    val solver = DeepSolverStrategy()

    val initial = intArrayOf(
        0,  1,   2,  3,  4,  5,  6,  7,  8,
        9,  10, 11, 12, 13, 14, 15, 16, 17,
        18, 19, 20, 21, 22, 23, 24, 25, 26,

        27, 28, 29, 30, 31, 32, 33, 34, 35,
        36, 37, 38, 39, 40, 41, 42, 43, 44,
        45, 46, 47, 48, 49, 50, 51, 52, 53,

        54, 55, 56, 57, 58, 59, 60, 61, 62,
        63, 64, 65, 66, 67, 68, 69, 70, 71,
        72, 73, 74, 75, 76, 77, 78, 79, 80,

        81, 82, 83, 84, 85, 86, 87, 88, 89,
        90, 91, 92, 93, 94, 95, 96, 97, 98,
        99, 100, 101, 102, 103, 104, 105, 106, 107
    )

    @Test
    fun testMoveR() {
        val cube = (0..107).map { it.toByte() }.toByteArray()
        val actual = solver.move(cube, solver.moveR)
        val expected = byteArrayOf(
            0,  1,  2,  3,  4, 32,  6,  7,  8,
            9, 10, 11, 12, 13, 41, 15, 16, 17,
            18, 19, 20, 21, 22, 50, 24, 25, 26,

            27, 28, 29, 30, 31, 59, 51, 42, 33,
            36, 37, 38, 39, 40, 68, 52, 43, 34,
            45, 46, 47, 48, 49, 77, 53, 44, 35,

            54, 55, 56, 57, 58, 86, 60, 61, 62,
            63, 64, 65, 66, 67, 95, 69, 70, 71,
            72, 73, 74, 75, 76, 104, 78, 79, 80,

            81, 82, 83, 84, 85, 5, 87, 88, 89,
            90, 91, 92, 93, 94, 14, 96, 97, 98,
            99, 100, 101, 102, 103, 23, 105, 106, 107
        )
        Assertions.assertArrayEquals(expected, actual)
    }

    @Test
    fun testMoveL() {
        val cube = (0..107).map { it.toByte() }.toByteArray()
        val actual = solver.move(cube, solver.moveL)
        val expected = byteArrayOf(
            0,  1,  2,  84,  4,  5,  6,  7,  8,
            9, 10, 11, 93, 13, 14, 15, 16, 17,
            18, 19, 20, 102, 22, 23, 24, 25, 26,

            45, 36, 27, 3, 31, 32, 33, 34, 35,
            46, 37, 28, 12, 40, 41, 42, 43, 44,
            47, 38, 29, 21, 49, 50, 51, 52, 53,

            54, 55, 56, 30, 58, 59, 60, 61, 62,
            63, 64, 65, 39, 67, 68, 69, 70, 71,
            72, 73, 74, 48, 76, 77, 78, 79, 80,

            81, 82, 83, 57, 85, 86, 87, 88, 89,
            90, 91, 92, 66, 94, 95, 96, 97, 98,
            99, 100, 101, 75, 103, 104, 105, 106, 107
        )
        Assertions.assertArrayEquals(expected, actual)
    }

    @Test
    fun testMoveU() {
        val cube = (0..107).map { it.toByte() }.toByteArray()
        val actual = solver.move(cube, solver.moveU)
        val expected = byteArrayOf(
            0,  1,  2, 21, 12,  3,  6,  7,  8,
            9, 10, 11, 22, 13,  4, 15, 16, 17,
            18, 19, 20, 23, 14,  5, 24, 25, 26,

            30, 31, 32, 33, 34, 35, 104, 103, 102,
            36, 37, 38, 39, 40, 41, 42, 43, 44,
            45, 46, 47, 48, 49, 50, 51, 52, 53,

            54, 55, 56, 57, 58, 59, 60, 61, 62,
            63, 64, 65, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 75, 76, 77, 78, 79, 80,

            81, 82, 83, 84, 85, 86, 87, 88, 89,
            90, 91, 92, 93, 94, 95, 96, 97, 98,
            99, 100, 101, 29, 28, 27, 105, 106, 107
        )
        Assertions.assertArrayEquals(expected, actual)
    }

    @Test
    fun testMoveD() {
        val cube = (0..107).map { it.toByte() }.toByteArray()
        val actual = solver.move(cube, solver.moveD)
        val expected = byteArrayOf(
            0,  1,  2,  3,  4,  5,  6,  7,  8,
            9, 10, 11, 12, 13, 14, 15, 16, 17,
            18, 19, 20, 21, 22, 23, 24, 25, 26,

            27, 28, 29, 30, 31, 32, 33, 34, 35,
            36, 37, 38, 39, 40, 41, 42, 43, 44,
            86, 85, 84, 45, 46, 47, 48, 49, 50,

            54, 55, 56, 75, 66, 57, 60, 61, 62,
            63, 64, 65, 76, 67, 58, 69, 70, 71,
            72, 73, 74, 77, 68, 59, 78, 79, 80,

            81, 82, 83, 53, 52, 51, 87, 88, 89,
            90, 91, 92, 93, 94, 95, 96, 97, 98,
            99, 100, 101, 102, 103, 104, 105, 106, 107
        )
        Assertions.assertArrayEquals(expected, actual)
    }

    @Test
    fun testMoveF() {
        val cube = (0..107).map { it.toByte() }.toByteArray()
        val actual = solver.move(cube, solver.moveF)
        val expected = byteArrayOf(
            0,  1,  2,  3,  4,  5,  6,  7,  8,
            9, 10, 11, 12, 13, 14, 15, 16, 17,
            18, 19, 20, 47, 38, 29, 24, 25, 26,

            27, 28, 57, 48, 39, 30, 21, 34, 35,
            36, 37, 58, 49, 40, 31, 22, 43, 44,
            45, 46, 59, 50, 41, 32, 23, 52, 53,

            54, 55, 56, 51, 42, 33, 60, 61, 62,
            63, 64, 65, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 75, 76, 77, 78, 79, 80,

            81, 82, 83, 84, 85, 86, 87, 88, 89,
            90, 91, 92, 93, 94, 95, 96, 97, 98,
            99, 100, 101, 102, 103, 104, 105, 106, 107
        )
        Assertions.assertArrayEquals(expected, actual)
    }

    @Test
    fun testMoveB() {
        val cube = (0..107).map { it.toByte() }.toByteArray()
        val actual = solver.move(cube, solver.moveB)
        val expected = byteArrayOf(
            0,  1,  2, 35, 44, 53,  6,  7,  8,
            9, 10, 11, 12, 13, 14, 15, 16, 17,
            18, 19, 20, 21, 22, 23, 24, 25, 26,

            5, 28, 29, 30, 31, 32, 33, 34, 77,
            4, 37, 38, 39, 40, 41, 42, 43, 76,
            3, 46, 47, 48, 49, 50, 51, 52, 75,

            54, 55, 56, 57, 58, 59, 60, 61, 62,
            63, 64, 65, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 27, 36, 45, 78, 79, 80,

            81, 82, 83, 102, 93, 84, 87, 88, 89,
            90, 91, 92, 103, 94, 85, 96, 97, 98,
            99, 100, 101, 104, 95, 86, 105, 106, 107
        )
        Assertions.assertArrayEquals(expected, actual)
    }
}
